# Generated by Django 4.1 on 2022-09-12 18:38

import django.contrib.auth.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('DELETED', 'Removido'), ('DEACTIVATED', 'Desativado'), ('ACTIVATED', 'Ativado')], default='ACTIVATED', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='data de atualização')),
                ('name', models.CharField(max_length=200, verbose_name='nome')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.CharField(max_length=100, verbose_name='email')),
                ('phone_number', models.CharField(max_length=20, verbose_name='telefone')),
                ('is_staff', models.BooleanField(default=False, verbose_name='membro de equipe')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
            },
        ),
    ]
